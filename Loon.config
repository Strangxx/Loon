#default configure
#Update Date: 2021.10.13 22:06:05 +0000
#author: Loon

[General]
skip-proxy = 192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,localhost,*.local,e.crashlynatics.com
bypass-tun = 10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,169.254.0.0/16,172.16.0.0/12,192.0.0.0/24,192.0.2.0/24,192.88.99.0/24,192.168.0.0/16,198.18.0.0/15,198.51.100.0/24,203.0.113.0/24,224.0.0.0/4,255.255.255.255/32
# [DNS] => DNS server
dns-server = system,119.29.29.29,223.5.5.5
# doh server, only for Wireformat
doh-server = https://example.com/dns-query
allow-udp-proxy = false
allow-wifi-access = true
wifi-access-http-port = 7222
wifi-access-socket5-port = 7221
proxy-test-url = http://www.qualcomm.cn/generate_204
test-timeout = 3


[Proxy]
# Built-in DIRECT、REJECT Strategys
# Built-in PROXY Point to any of the local nodes or subscription nodes (there is a local node that points to the first local node by default. When there is no local node but there is a subscription node, it points to the first node of the first subscription. When neither the local node nor the subscription node exists, it points to DIRECT）
#ss
ss1 = Shadowsocks,example.com,443,aes-128-gcm,"password",fast-open=false,udp=true
ss2 = Shadowsocks,example2.com,443,chacha20,"password",fast-open=true,udp=true
#ss+simple obfs
ssObfs1 = Shadowsocks,example.com,80,aes-128-gcm,"password",obfs-name=http,obfs-host=www.micsoft.com,fast-open=true,udp=true
ssObfs2 = Shadowsocks,example.com,443,aes-128-gcm,"password",obfs-name=tls,obfs-host=www.micsoft.com,fast-open=true,udp=true
#ssr
# Node name = protocol, server address, port, encryption method, password, protocol = protocol, protocol-param = protocol parameters, obfs = confusion, obfs-param = confusion parameters
ssr1 = ShadowsocksR,example.com,443,aes-256-cfb,"password",protocol=orig,obfs=http_simple,obfs-param=download.windows.com,fast-open=false,udp=true
ssr2 = ShadowsocksR,example.com,10076,aes-128-cfb,"password",protocol=auth_chain_a,protocol-param=9555:loon,obfs=http_post,obfs-param=download.windows.com,fast-open=false,udp=true
ssr3 = ShadowsocksR,example.com,10076,chacha20,"password",protocol=auth_aes128_md5,protocol-param=9555:loon,obfs=tls1.2_ticket_auth,obfs-param=download.windows.com,fast-open=false,udp=true
ssr4 = ShadowsocksR,example.com,10076,chacha20-ietf,"password",protocol=auth_aes128_sha1,protocol-param=9555:loon,obfs=plain,fast-open=false,udp=true
#http
http1 = http,example.com,80
http2 = http,example.com,80,username,"password"
#https
https1 = https,example.com,443
https2 = https,example.com,443,username,"password"
https3 = https,example.com,443,username,"password",skip-cert-verify=true,tls-name=example.com
#vmess+tcp
# Node name = Protocol, server address, port, encryption method, UUID, transmission method:(tcp/ws),path=websocket Shake handsheader Hit the target path, host=websocket Shake hands header Hit the target path, over-tls=Is it? tls, tls-name=tlsName, skip-cert-verify=Whether to skip certificate verification（No by default）
vmess1 = vmess,example.com,10086,aes-128-gcm,"52396e06-041a-4cc2-be5c-8525eb457809",transport=tcp,path=/,host=v3-dy-y.ixigua.com,over-tls=false
#vmess+tcp+tls
vmess2 = vmess,example.com,10086,aes-128-gcm,"52396e06-041a-4cc2-be5c-8525eb457809",transport=tcp,path=/,host=v3-dy-y.ixigua.com,over-tls=true,tls-name=example.com,skip-cert-verify=true
#vmess+ws
vmess3 = vmess,example.com,10086,aes-128-gcm,"52396e06-041a-4cc2-be5c-8525eb457809",transport=ws,path=/,host=v3-dy-y.ixigua.com,over-tls=false
#vmess+wss
vmess4 = vmess,example.com,10086,aes-128-gcm,"52396e06-041a-4cc2-be5c-8525eb457809",transport=ws,path=/,host=v3-dy-y.ixigua.com,over-tls=true,tls-name=example.com,skip-cert-verify=true
#VLESS
vless1 = VLESS,example.com,10087,"52396e06-041a-4cc2-be5c-8525eb457809",,transport=tcp,path=/,host=v3-dy-y.ixigua.com,over-tls=false
vless2 = VLESS,example.com,10087,"52396e06-041a-4cc2-be5c-8525eb457809",transport=ws,path=/,host=v3-dy-y.ixigua.com,over-tls=true,tls-name=example.com,skip-cert-verify=true
#trojan
trojan1 = trojan,example.com,443,"password",skip-cert-verify=false,tls-name=example.com
trojan2 = trojan,example.com,443,"password",skip-cert-verify=true,tls-name=example.com

[Remote Proxy]
# 订阅节点
# 别名 = 订阅URL
Subs = https://example/server-complete.txt
Subs2 = https://example2/server-complete.txt

[Remote Filter]
# Filter subscription nodes，Filtered results can be added to the policy group.，Three filtering methods are currently supported.
# NodeSelect: Use the node selected on the UI。
# NameKeyword: Filter the names of all nodes in the subscription according to the keywords provided.，Use filtered nodes。
# NameRegex: Filter the names of all nodes in the subscription according to the regular expression provided.，Use filtered nodes。
Netflix = NodeSelect,Subs
Hulu = NameKeyword,Subs,Subs2,FilterKey = Hulu
HK = NameRegex,Subs,FilterKey = *HK

[Proxy Group]
# Node options
PROXY = select,Auto,1,2,3,4,Subs
# url-test Model，Send out to the provided URL http header Request，According to the returned results，Select the node with the fastest speed measurement，Default interval 600s，Measure the speed timeout of 5s. In order to avoid waste of resources, it is recommended not to have too many nodes. Only single nodes and remote nodes are supported, and others will be ignored.
Auto = url-test,1,2,3,4,Subs,url = http://bing.com/,interval = 600
# fallback Model，Similar to url-test, the difference is that the first available node will be returned in order. In order to avoid waste of resources, it is recommended not to have too many nodes. Only single nodes and remote nodes are supported, and others will be ignored.
Auto1 = fallback,1,2,3,4,Subs,url = http://bing.com/,interval = 600
# Alias = ssid，Tacitly approve = Strategys， Cellular = policy, ssid name = policy
SSID = ssid, default = PROXY, cellular = DIRECT, "DivineEngine" = PROXY
#Load balancing, three algorithms are available: random selection of available nodes in the policy group, round-robin: polling policy group available nodes, pcc: on the basis of random, use the same node for the same host, where the url is used to test node availability, measure the speed every interval, and the max-timeout parameter is used to filter nodes with test time exceeding max-timeout as unavailable nodes.
LoadBalance = load-balance,node1,node2,remoteNodes, url = http://bing.com, interval = 600,algorithm = pcc, max-timeout=3000
# Advertising mode
Advertising = select,REJECT,DIRECT
# Whitelist mode PROXY，Blacklist mode DIRECT
Final = select,PROXY,DIRECT

[Rule]
# Local RULE
# Type:DOMAIN-SUFFIX,DOMAIN,DOMAIN-KEYWORD,USER-AGENT,URL-REGEX,IP-CIDR
# Strategy:DIRECT,Proxy,REJECT
# Options:no-resolve(no-resolve(only for cidr))
DOMAIN,google.com,PROXY
# GeoIP China
GEOIP,CN,DIRECT
FINAL,Final

[Remote Rule]
# Remote Rule
# Subscription rule URL, policy
# PROXY
https://raw.githubusercontent.com/Loon0x00/LoonExampleConfig/master/Rule/ExampleRule.list,policy=PROXY,enabled=true

[URL Rewrite]
enable = true
# Redirect Google Search Service
^https?:\/\/(www.)?(g|google)\.cn https://www.google.com 302

[Remote Rewrite]
# 订阅 URL Rewrite
# Subscribe to url, alias (optional)
https://raw.githubusercontent.com/Loon0x00/LoonExampleConfig/master/Rewrite/AutoRewrite_Example.list,tag=auto,enable=true

[Script]
enable = true
# http-request 处理请求的脚本
# http-response 处理请求响应的脚本
# cron 定时脚本
# network-changed   网络发生变化触发脚本

# http-request ^https?:\/\/(www.)?(example)\.com script-path=localscript.js,tag = requestScript,enable=true
# http-response ^https?:\/\/(www.)?(example)\.com script-path=https://example.com/loon.js,timeout=10,requires-body = true,tag = responseScript,enable=true
# cron "0 8 * * *" script-path=cron.js,tag = responseScript,enable=true

network-changed script-path=https://raw.githubusercontent.com/Loon0x00/LoonExampleConfig/master/Script/netChanged.js, tag=changeModel,enable=true

[Remote Script]
# https://example.com/loon.js, tag=scripts, enable=true

[Plugin]
# plugin-url tag=tag,proxy=In the plug-in PROXY The strategy pointed out ,enable=true
# pluginThe policy can be set to DIRECT,REJECT,PROXY，Among them, PROXY is the policy that users manually map in the app, and PROXY is used by default if the policy is not followed after rule.
# example: https://raw.githubusercontent.com/Loon0x00/LoonExampleConfig/master/Rewrite/AutoRewrite_Example.list,tag=boxjs,enable=true

[MITM]
hostname = *.example.com,*.sample.com
enable = true
You can go to the configuration file.skip-server-cert-verify
#ca-p12 =
#ca-passphrase =
